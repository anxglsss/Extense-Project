// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  role      Role
  avatarUrl String?
  password  String

  posts                 Post[]          @relation
  comments              Comment[]       @relation
  likes                 Like[]          @relation
  favorites             Favorite[]      @relation
  friendRequestSent     FriendRequest[] @relation("SentRequest")
  friendRequestReceived FriendRequest[] @relation("ReceiveRequest")
  friendship1           Friendship[]    @relation("FriendUser1")
  friendship2           Friendship[]    @relation("FriendUser2")
  refreshToken          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  imageUrl String?

  user     User       @relation(fields: [userId], references: [id])
  userId   Int
  comments Comment[]  @relation
  likes    Like[]     @relation
  favorite Favorite[] @relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id      Int  @id @default(autoincrement())
  user1   User @relation("FriendUser1", fields: [user1Id], references: [id])
  user1Id Int
  user2   User @relation("FriendUser2", fields: [user2Id], references: [id])
  user2Id Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  sender     User   @relation("SentRequest", fields: [senderId], references: [id])
  senderId   Int
  receiver   User   @relation("ReceiveRequest", fields: [receiverId], references: [id])
  receiverId Int
  status     Status @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderId, receiverId])
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
